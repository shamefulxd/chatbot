import logging
import sqlite3
from config import BOT_TOKEN
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = BOT_TOKEN
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect('recipes.db', check_same_thread=False)
cursor = conn.cursor()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS recipes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        category_id INTEGER,
        ingredients TEXT,
        instructions TEXT,
        user_id INTEGER,
        FOREIGN KEY (category_id) REFERENCES categories(id),
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )
    ''')
    conn.commit()


init_db()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
class AddRecipe(StatesGroup):
    waiting_for_category = State()
    waiting_for_title = State()
    waiting_for_ingredients = State()
    waiting_for_instructions = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_main_keyboard():
    buttons = [
        [KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ"), KeyboardButton(text="–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã üìã")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚ûï")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def make_categories_keyboard():
    cursor.execute("SELECT id, name FROM categories ORDER BY name")
    categories = cursor.fetchall()
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"category_{id}")]
        for id, name in categories
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def make_recipes_keyboard(category_id=None):
    if category_id:
        cursor.execute('''
            SELECT r.id, r.title 
            FROM recipes r
            WHERE r.category_id = ?
            ORDER BY r.title
        ''', (category_id,))
    else:
        cursor.execute('''
            SELECT r.id, r.title 
            FROM recipes r
            ORDER BY r.title
        ''')

    recipes = cursor.fetchall()
    buttons = [
        [InlineKeyboardButton(text=title, callback_data=f"recipe_{id}")]
        for id, title in recipes
    ]

    if category_id:
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
        (user_id, username, full_name)
    )
    conn.commit()

    await message.answer(
        "üë®‚Äçüç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=make_main_keyboard()
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ - –Ω–∞—á–∞–ª–æ
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚ûï")
async def add_recipe_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç!\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=make_categories_keyboard()
    )
    await state.set_state(AddRecipe.waiting_for_category)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(AddRecipe.waiting_for_category, lambda c: c.data.startswith('category_'))
async def process_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split('_')[1])
    cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    category_name = cursor.fetchone()[0]

    await state.update_data(category_id=category_id, category_name=category_name)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddRecipe.waiting_for_title)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞)
@dp.message(AddRecipe.waiting_for_category)
async def process_new_category(message: types.Message, state: FSMContext):
    category_name = message.text.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    cursor.execute(
        "INSERT OR IGNORE INTO categories (name) VALUES (?)",
        (category_name,)
    )
    conn.commit()

    cursor.execute("SELECT id FROM categories WHERE name = ?", (category_name,))
    category_id = cursor.fetchone()[0]

    await state.update_data(category_id=category_id, category_name=category_name)
    await message.answer(
        f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddRecipe.waiting_for_title)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
@dp.message(AddRecipe.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
    )
    await state.set_state(AddRecipe.waiting_for_ingredients)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
@dp.message(AddRecipe.waiting_for_ingredients)
async def process_ingredients(message: types.Message, state: FSMContext):
    await state.update_data(ingredients=message.text)
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:"
    )
    await state.set_state(AddRecipe.waiting_for_instructions)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
@dp.message(AddRecipe.waiting_for_instructions)
async def process_instructions(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç
    cursor.execute(
        '''INSERT INTO recipes 
        (title, category_id, ingredients, instructions, user_id)
        VALUES (?, ?, ?, ?, ?)''',
        (
            user_data['title'],
            user_data['category_id'],
            user_data['ingredients'],
            message.text,
            user_id
        )
    )
    conn.commit()

    await message.answer(
        f"‚úÖ –†–µ—Ü–µ–ø—Ç '{user_data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{user_data['category_name']}'!",
        reply_markup=make_main_keyboard()
    )
    await state.clear()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message(lambda message: message.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ")
async def show_categories(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=make_categories_keyboard()
    )


# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
@dp.message(lambda message: message.text == "–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã üìã")
async def show_all_recipes(message: types.Message):
    await message.answer(
        "–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã:",
        reply_markup=make_recipes_keyboard()
    )


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith('category_'))
async def show_recipes_by_category(callback: types.CallbackQuery):
    category_id = int(callback.data.split('_')[1])
    cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    category_name = cursor.fetchone()[0]

    await callback.message.edit_text(
        f"–†–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
        reply_markup=make_recipes_keyboard(category_id)
    )
    await callback.answer()


# –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=make_categories_keyboard()
    )
    await callback.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
@dp.callback_query(lambda c: c.data.startswith('recipe_'))
async def show_recipe(callback: types.CallbackQuery):
    recipe_id = int(callback.data.split('_')[1])

    cursor.execute('''
        SELECT r.title, c.name, r.ingredients, r.instructions, u.full_name
        FROM recipes r
        JOIN categories c ON r.category_id = c.id
        JOIN users u ON r.user_id = u.user_id
        WHERE r.id = ?
    ''', (recipe_id,))
    recipe = cursor.fetchone()

    if recipe:
        title, category, ingredients, instructions, author = recipe
        response = (
            f"üç≥ <b>{title}</b>\n"
            f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            f"üõí <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients}\n\n"
            f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n{instructions}\n\n"
            f"üë®‚Äçüç≥ –ê–≤—Ç–æ—Ä: {author}"
        )
        await callback.message.answer(response, parse_mode="HTML")
    else:
        await callback.message.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())
