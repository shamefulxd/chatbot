import logging
import random
import sqlite3
from config import BOT_TOKEN
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = BOT_TOKEN
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect('recipes.db', check_same_thread=False)
cursor = conn.cursor()


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS recipes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        category_id INTEGER NOT NULL,
        ingredients TEXT NOT NULL,
        instructions TEXT NOT NULL,
        user_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories(id),
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )
    ''')

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("SELECT COUNT(*) FROM categories")
    if cursor.fetchone()[0] == 0:
        basic_categories = [
            ('–ó–∞–≤—Ç—Ä–∞–∫–∏',), ('–û–±–µ–¥—ã',), ('–£–∂–∏–Ω—ã',),
            ('–î–µ—Å–µ—Ä—Ç—ã',), ('–í—ã–ø–µ—á–∫–∞',), ('–ù–∞–ø–∏—Ç–∫–∏',)
        ]
        cursor.executemany(
            "INSERT INTO categories (name) VALUES (?)",
            basic_categories
        )
        conn.commit()


init_db()


class RecipeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    select_category = State()
    enter_title = State()
    enter_ingredients = State()
    enter_instructions = State()


def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üçΩ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã"),
             KeyboardButton(text="üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"),
             KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")],
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫")]
        ],
        resize_keyboard=True
    )


def random_recipe_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")],
            [KeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
        ],
        resize_keyboard=True
    )


def home_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")]],
        resize_keyboard=True
    )


def cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


def categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
    cursor.execute("SELECT id, name FROM categories ORDER BY name")
    categories = cursor.fetchall()

    buttons = []
    row = []
    for i, (id_, name) in enumerate(categories, 1):
        row.append(InlineKeyboardButton(text=name, callback_data=f"cat_{id_}"))
        if i % 2 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def recipes_keyboard(category_id=None, page=0, per_page=5):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏."""
    if category_id:
        cursor.execute('''
            SELECT id, title FROM recipes 
            WHERE category_id = ?
            ORDER BY title
            LIMIT ? OFFSET ?
        ''', (category_id, per_page, page * per_page))
    else:
        cursor.execute('''
            SELECT id, title FROM recipes 
            ORDER BY title
            LIMIT ? OFFSET ?
        ''', (per_page, page * per_page))

    recipes = cursor.fetchall()

    buttons = []
    for id_, title in recipes:
        buttons.append([InlineKeyboardButton(text=title, callback_data=f"rec_{id_}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"prev_{page}_{category_id or 0}"
            )
        )

    if len(recipes) == per_page:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"next_{page}_{category_id or 0}"
            )
        )

    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def send_random_recipe(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç."""
    cursor.execute("SELECT COUNT(*) FROM recipes")
    count = cursor.fetchone()[0]
    random_id = random.randint(1, count)

    cursor.execute('''
        SELECT r.title, c.name, r.ingredients, r.instructions, u.full_name
        FROM recipes r
        JOIN categories c ON r.category_id = c.id
        JOIN users u ON r.user_id = u.user_id
        WHERE r.id = ?
    ''', (random_id,))

    recipe = cursor.fetchone()

    if recipe:
        title, category, ingredients, instructions, author = recipe
        response = (
            f"üé≤ <b>–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:</b>\n\n"
            f"üç≥ <b>{title}</b>\n"
            f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            f"üõí <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients}\n\n"
            f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n{instructions}\n\n"
            f"üë®‚Äçüç≥ –ê–≤—Ç–æ—Ä: {author}"
        )
        await message.answer(
            response,
            parse_mode="HTML",
            reply_markup=random_recipe_keyboard()
        )
    else:
        await send_random_recipe(message)


@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
        (user_id, username, full_name)
    )
    conn.commit()

    await message.answer(
        "üë®‚Äçüç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RecipeBot!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- üçΩ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "- üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "- üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
        "- ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
        "- üîç –ü–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )


@dp.message(lambda message: message.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def go_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )


@dp.message(lambda message: message.text == "üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=categories_keyboard()
    )


@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def show_recipes_in_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    category_id = int(callback.data.split("_")[1])
    cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    category_name = cursor.fetchone()[0]

    await callback.message.answer(
        f"–†–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
        reply_markup=recipes_keyboard(category_id=category_id)
    )
    await callback.answer()


@dp.message(lambda message: message.text == "üçΩ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã")
async def show_all_recipes(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã."""
    await message.answer(
        "–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã:",
        reply_markup=recipes_keyboard()
    )


@dp.message(lambda message: message.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")
async def random_recipe(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
    cursor.execute("SELECT COUNT(*) FROM recipes")
    count = cursor.fetchone()[0]

    if count == 0:
        await message.answer(
            "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.",
            reply_markup=main_menu_keyboard()
        )
        return

    await send_random_recipe(message)


@dp.message(lambda message: message.text == "üé≤ –ù–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")
async def new_random_recipe(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
    await send_random_recipe(message)


@dp.callback_query(lambda c: c.data.startswith(("rec_", "prev_", "next_")))
async def handle_recipes_pagination(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    if callback.data.startswith("rec_"):
        recipe_id = int(callback.data.split("_")[1])

        cursor.execute('''
            SELECT r.title, c.name, r.ingredients, r.instructions, u.full_name
            FROM recipes r
            JOIN categories c ON r.category_id = c.id
            JOIN users u ON r.user_id = u.user_id
            WHERE r.id = ?
        ''', (recipe_id,))
        recipe = cursor.fetchone()

        if recipe:
            title, category, ingredients, instructions, author = recipe
            response = (
                f"üç≥ <b>{title}</b>\n"
                f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
                f"üõí <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients}\n\n"
                f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n{instructions}\n\n"
                f"üë®‚Äçüç≥ –ê–≤—Ç–æ—Ä: {author}"
            )
            await callback.message.answer(
                response,
                parse_mode="HTML",
                reply_markup=home_keyboard()
            )
        else:
            await callback.message.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        action, page, category_id = callback.data.split("_")
        page = int(page)
        category_id = int(category_id) if category_id != "0" else None

        if action == "prev":
            page -= 1
        elif action == "next":
            page += 1

        if category_id:
            cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
            category_name = cursor.fetchone()[0]
            await callback.message.edit_text(
                f"–†–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
                reply_markup=recipes_keyboard(category_id=category_id, page=page)
            )
        else:
            await callback.message.edit_text(
                "–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã:",
                reply_markup=recipes_keyboard(page=page)
            )

    await callback.answer()


@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")
async def start_adding_recipe(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=categories_keyboard()
    )
    await state.set_state(RecipeStates.select_category)


@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_adding(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞."""
    await state.clear()
    await message.answer(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_menu_keyboard()
    )


@dp.callback_query(RecipeStates.select_category, lambda c: c.data.startswith("cat_"))
async def select_existing_category(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    category_id = int(callback.data.split("_")[1])
    cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    category_name = cursor.fetchone()[0]

    await state.update_data(category_id=category_id, category_name=category_name)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(RecipeStates.enter_title)
    await callback.answer()


@dp.message(RecipeStates.select_category)
async def enter_new_category(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_adding(message, state)
        return

    category_name = message.text.strip()

    cursor.execute(
        "INSERT OR IGNORE INTO categories (name) VALUES (?)",
        (category_name,)
    )
    conn.commit()

    cursor.execute("SELECT id FROM categories WHERE name = ?", (category_name,))
    category_id = cursor.fetchone()[0]

    await state.update_data(category_id=category_id, category_name=category_name)
    await message.answer(
        f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(RecipeStates.enter_title)


@dp.message(RecipeStates.enter_title)
async def enter_recipe_title(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_adding(message, state)
        return

    await state.update_data(title=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(RecipeStates.enter_ingredients)


@dp.message(RecipeStates.enter_ingredients)
async def enter_recipe_ingredients(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_adding(message, state)
        return

    await state.update_data(ingredients=message.text)
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(RecipeStates.enter_instructions)


@dp.message(RecipeStates.enter_instructions)
async def enter_recipe_instructions(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_adding(message, state)
        return

    user_data = await state.get_data()
    user_id = message.from_user.id

    cursor.execute(
        '''INSERT INTO recipes 
        (title, category_id, ingredients, instructions, user_id)
        VALUES (?, ?, ?, ?, ?)''',
        (
            user_data['title'],
            user_data['category_id'],
            user_data['ingredients'],
            message.text,
            user_id
        )
    )
    conn.commit()

    await message.answer(
        f"‚úÖ –†–µ—Ü–µ–ø—Ç '{user_data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω "
        f"–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{user_data['category_name']}'!",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
async def start_search(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞."""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )


@dp.message(lambda message: message.text and message.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def search_recipes(message: types.Message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    search_query = f"%{message.text}%"
    cursor.execute('''
        SELECT r.id, r.title, c.name 
        FROM recipes r
        JOIN categories c ON r.category_id = c.id
        WHERE r.title LIKE ?
        ORDER BY r.title
        LIMIT 20
    ''', (search_query,))

    recipes = cursor.fetchall()

    if recipes:
        buttons = [
            [InlineKeyboardButton(text=f"{title} ({category})", callback_data=f"rec_{id_}")]
            for id_, title, category in recipes
        ]

        await message.answer(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await message.answer(
            "–†–µ—Ü–µ–ø—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=main_menu_keyboard()
        )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())
